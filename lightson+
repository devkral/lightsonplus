#!/usr/bin/env bash
# lightson+

# Copyright (c) 2018 spinal.by at gmail com
# Copyright (c) 2014 devkral at web de
# url: https://github.com/devkral/lightsonplus

#based on
# Copyright (c) 2011 iye.cba at gmail com
# url: https://github.com/iye/lightsOn
# This script is licensed under GNU GPL version 2.0 or above

# Description: Bash script that prevents the screensaver and display power
# management (DPMS) from being activated while watching fullscreen videos
# on Firefox, Chrome and Chromium. Media players like mplayer, VLC and minitube
# can also be detected.
# One of {x, k, gnome-}screensaver must be installed.

# HOW TO USE:
# "./lightson+ -d 2 &" will check every 2 minutes if Mplayer, VLC, Firefox or
# Chromium are fullscreen and delay screensaver and Power Management if so.
# If you don't pass an argument, the checks are done every minute.


# Select the programs to be checked
declare -A checked_apps=(
    [mpv]=0
    [mplayer]=0
    [plexmediaplayer]=0
    [vlc]=1
    [totem]=1
    [steam]=0
    [minitube]=0
)
#chrome_app_name="Netflix"
flash_detection=1
html5_detection=1

audio_detection=0
#minload=1.5
delay=1
# You can find the value for this with `xprop WM_NAME`
# (click on the window once the mouse is a crosshair)
window_name=""

# realdisp
realdisp=`echo "$DISPLAY" | cut -d. -f1`

inhibitfile="/tmp/lightsoninhibit-$UID-$realdisp"
pidfile="/tmp/lightson-$UID-$realdisp.pid"

# YOU SHOULD NOT NEED TO MODIFY ANYTHING BELOW THIS LINE
die() {
    echo "$@" >&2
    exit 1
}

pidcreate() {
    # just one instance can run simultaneously
    if [ ! -e "$pidfile" ]; then
        echo "$$" > "$pidfile"
    else
        if [ -d "/proc/$(cat "$pidfile")" ]; then
            die "Another instance is running, abort!"
        else
            echo "$$" > "$pidfile"
        fi
    fi
}

pidremove() {
    if [ ! -e "$pidfile" ]; then
        echo "Error: missing pidfile" >&2
    elif [ ! -f "$pidfile" ]; then
        echo -e "Error: \"$pidfile\" is not a file\n" >&2
    else
        if [ "$(cat "$pidfile")" != "$$" ]; then
            die "Another instance is running, abort!"
        else
            rm -f "$pidfile"
        fi
    fi
    exit 0
}

pidcreate
trap "pidremove" EXIT

# Enumerate all the attached screens
displays=""
while read id; do
    displays="$displays $id"
done< <(xvinfo | sed -n 's/^screen #\([0-9]\+\)$/\1/p')

# Detect screensaver being used
if [ `dbus-send --session --print-reply=literal --type=method_call --dest=org.freedesktop.ScreenSaver /ScreenSaver/ org.freedesktop.ScreenSaver.GetActive &> /dev/null; echo $?` -eq 0 ]; then
    screensaver="freedesktop-screensaver"
#elif [ `pgrep -c gnome-shell` -ge 1 ] ;then
#    screensaver="xdofallback"
elif [ `pgrep -c xscreensaver` -ge 1 ]; then
    screensaver="xscreensaver"
elif [ `pgrep -c mate-screensaver` -ge 1 ]; then
    screensaver="mate-screensaver"
elif [ `pgrep -c xautolock` -ge 1 ]; then
    screensaver="xautolock"
elif [ -e "/usr/bin/xdotool" ]; then
    screensaver="xdofallback"
else
    screensaver=""
    die "No screensaver detected"
fi

checkFullscreen() {
    # loop through every display looking for a fullscreen window
    for display in $displays; do
        # get id of active window and clean output
        active_win_id=`DISPLAY=$realdisp.${display} xprop -root _NET_ACTIVE_WINDOW`
        active_win_id=${active_win_id##*# }
        active_win_id=${active_win_id:0:9} # eliminate potentially trailing spaces

        top_win_id=`DISPLAY=$realdisp.${display} xprop -root _NET_CLIENT_LIST_STACKING`
        top_win_id=${active_win_id##*, }
        top_win_id=${top_win_id:0:9} # eliminate potentially trailing spaces

        # Check if Active Window (the foremost window) is in fullscreen state
        if [ ${#active_win_id} -ge 3 ] && [ "$active_win_id" != 0x0 ]; then
            isActiveWinFullscreen=`DISPLAY=$realdisp.${display} xprop -id $active_win_id | grep _NET_WM_STATE_FULLSCREEN`
        else
            isActiveWinFullscreen=""
        fi
        if [ ${#top_win_id} -ge 3 ] && [ "$top_win_id" != 0x0 ]; then
            isTopWinFullscreen=`DISPLAY=$realdisp.${display} xprop -id $top_win_id | grep _NET_WM_STATE_FULLSCREEN`
        else
            isTopWinFullscreen=""
        fi

        if [ -n "$window_name" ]; then
            isNamedFullscreen=`DISPLAY=$realdisp.${display} xprop -name "$window_name" | grep _NET_WM_STATE_FULLSCREEN`
        else
            isNamedFulscreen=""
        fi

        if [[ "$isActiveWinFullscreen" = *NET_WM_STATE_FULLSCREEN* ]] || [[ "$isTopWinFullscreen" = *NET_WM_STATE_FULLSCREEN* ]]; then
            isAppRunning && delayScreensaver
        fi

        # If we are detecting by named application, then we need to detect if any audio is playing.
        # Detecting by name is used for multiple monitors where the video might be playing, but
        # not in focus.
        if [[ "$isNamedFullscreen" = *NET_WM_STATE_FULLSCREEN* ]]; then
            checkAudioPlaying && delayScreensaver
        fi
    done
}

# Check if active window is mplayer, vlc or firefox
# Then change IFs to detect more specifically the apps "<vlc>" and if process name exist

isAppRunning() {
    # Get title of active window
    active_win_title=`xprop -id $active_win_id | grep "WM_CLASS(STRING)" | cut -d'"' -f4 | awk '{print tolower($0)}'`

    for app in "${!checked_apps[@]}"; do
        grep -iq "$app" <<< "$active_win_title" \
            && [ "${checked_apps[$app]}" = 1 ] \
            && [ `pgrep -ic "$app"` -ge 1 ] \
            && checkAudio "$app" \
            && return 0
    done

    [ "$html5_detection" = 1 ] && for app in chromium chrome firefox brave opera epiphany; do
        grep -iq "$app" <<< "$active_win_title" \
            && [ `pgrep -ic "$app"` -ge 1 ] \
            && checkAudio "$app" \
            && return 0
    done

    [ "$flash_detection" = 1 ] && case "$active_win_title" in
    *chromium*)
        [ `pgrep -ifc "chromium --type=ppapi"` -ge 1 ] && return 0
        ;;
    *chrome*)
        [ `pgrep -ifc "chrome --type=ppapi"` -ge 1 ] && return 0
        ;;
    *brave*)
        [ `pgrep -ifc "brave --type=ppapi"` -ge 1 ] && return 0
        ;;
    *unknown*|*plugin-container*)  # firefox
        [ `pgrep -ic plugin-container` -ge 1 ] && return 0
        ;;
    *webKitpluginprocess*)
        [ `pgrep -ifc ".*WebKitPluginProcess.*flashp.*"` -ge 1 ] && return 0
        ;;
    esac

    if [ -n "$chrome_app_name" ]; then
        # Check if google chrome is running in app mode
        grep -iq "$chrome_app_name" <<< "$active_win_title" && [ `pgrep -ifc "chrome --app"` -ge 1 ] && return 0
    fi

    [ -n "$minload" ] && [ "$(echo "$(sed 's/ .*$//' /proc/loadavg) > $minload" | bc -q)" -eq "1" ] && return 0

    false
}

checkAudioPlaying() {
    # Check if any application is playing sounds in pulse
    # This is useful if your application keeps the stream in pulse open
    # but, lists it as CORKED for example.
    # It's also useful if you watch videos on multiple monitors and might not
    # have the video in focus.
    [ $audio_detection = 0 ] && return 0
    pacmd list-sink-inputs | grep -Eiq "RUNNING"
}

checkAudio() {
    # Check if application is streaming sound to PulseAudio
    [ $audio_detection = 0 ] && return 0
    pacmd list-sink-inputs | sed 's/[ \t]//g' | grep -Eiq "application.name=.*$1"
}

delayScreensaver() {
    # Reset inactivity time counter so screensaver is not started
    case $screensaver in
    "xscreensaver" )
        xscreensaver-command -deactivate > /dev/null;;
    "mate-screensaver" )
            mate-screensaver-command --poke > /dev/null;;
    "xautolock" )
        xautolock -disable
        xautolock -enable;;
    "xdofallback" )
        xdotool key shift
        ;;
    "freedesktop-screensaver" )
        dbus-send --session --reply-timeout=2000 --type=method_call --dest=org.freedesktop.ScreenSaver /ScreenSaver org.freedesktop.ScreenSaver.SimulateUserActivity;;
    esac

    # Check if DPMS is on. If it is, deactivate and reactivate again. If it is not, do nothing.
    dpmsStatus=`xset -q | grep -c 'DPMS is Enabled'`
    [ "$dpmsStatus" = 1 ] && xset -dpms && xset dpms
}

help() {
    cat <<EOF
USAGE:    $ lighsonplus [FLAG1 ARG1] ... [FLAGn ARGn]
FLAGS (ARGUMENTS must be 0 or 1, except stated otherwise):

  -d,  --delay             Time interval in minutes, default is 1 min
  -pa, --audio             Audio detection
  -ca, --chrome-app        Chrome app detection, app name must be passed
  -f,  --flash             Flash detection (Supported: firefox, chromium, webkit)
  -h5, --html5             HTML5 detection
  -la, --minload           Load average detection
  -wn, --window-name       Detect by window name

$(for app in "${!checked_apps[@]}"; do
    printf "  %-5s%-20s%s\n" "${app_short_flags[$app]}," "--$app" "${app^} detection"
done)
EOF
}

checkBool() {
    [ -n "$2" ] && [[ $2 = [01] ]] || die "Invalid argument. 0 or 1 expected after \"$1\" flag."
}

init_app_short_flags() {
    for app in "${!checked_apps[@]}"; do
        [ "${app_short_flags[$app]}" ] && continue
        for i in $(seq 1 ${#app}); do
            if ! grep -q -- "${app:0:i} " <<< "${app_short_flags[*]} "; then  # spaces matter
                app_short_flags[$app]="-${app:0:i}"
                break
            fi
        done
    done
}

# this is hardcoded for retro-compatibilty
declare -A app_short_flags=(
    [mpv]=-m
    [mplayer]=-mp
    [vlc]=-v
    [totem]=-t
    [plexmediaplayer]=-pl
    [steam]=-s
    [minitube]=-mt

    [delay]=-d
    [audio]=-pa
    [chrome-app]=-ca
    [flash]=-f
    [html5]=-h5
    [minload]=-la
    [window-name]=-wn
)

init_app_short_flags

while [ -n "$1" ]; do
    case $1 in
       "-d" | "--delay" )
            [[ -z "$2" || "$2" = *[^0-9]* ]] && die "Invalid argument. Time in minutes expected after \"$1\" flag. Got \"$2\"" || delay=$2;;
        "-ca" | "--chrome-app" )
            [ -n "$2" ] && chrome_app_name="$2" || die "Missing argument. Chrome app name expected after \"$1\" flag.";;
        "-wn" | "--window-name" )
            [ -n "$2" ] && window_name="$2" || die "Missing argument. Window name expected after \"$1\" flag.";;
        "-la" | "--minload" )
            [ -n "$2" ] && [[ "$(echo "$2 > 0" | bc -q)" -eq 1 ]] && minload=$2 || die "Invalid argument. >0 expected after \"$1\" flag.";;
        "-pa" | "--audio" )
            checkBool "$@"; audio_detection=$2;;
        "--plex-media-player" )
            checkBool "$@"; [ "$2" = 1 ] && echo "Deprecated $1: use --plexmediaplayer instead" && checked_apps[plexmediaplayer]=1;;
        "-ff" | "--firefox-flash" )
            checkBool "$@"; [ "$2" = 1 ] && echo "Deprecated $1: use --flash instead" && flash_detection=1;;
        "-cf" | "--chromium-flash" )
            checkBool "$@"; [ "$2" = 1 ] && echo "Deprecated $1: use --flash instead" && flash_detection=1;;
        "-wf" | "--webkit-flash" )
            checkBool "$@"; [ "$2" = 1 ] && echo "Deprecated $1: use --flash instead" && flash_detection=1;;
        "-f"  | "--flash" )
            checkBool "$@"; flash_detection=$2;;
        "-h5" | "--html5" )
            checkBool "$@"; html5_detection=$2;;
        "-h" | "--help" )
            help && exit 0;;
        * )
            for app in "${!checked_apps[@]}" FAIL; do
                if [ "$1" = --$app ] || [ "$1" = "${app_short_flags[$app]}" ]; then
                    checked_apps[$app]=$2
                    break
                fi
            done
            [ $app = FAIL ] && die "Invalid argument. See -h, --help for more information.";;
    esac

    # Arguments must always be passed in tuples
    shift 2
done

# Convert delay to seconds. We substract 10 for assurance.
delay=$[delay*60-10]
echo "Start lightson+ mainloop"
while true; do
    [ -f "$inhibitfile" ] && delayScreensaver || checkFullscreen
    sleep $delay
done

exit 0
